package sha

import (
	"crypto/sha256"
	"fmt"
	"math/rand"
	"testing"

	cmp "github.com/OhYee/goutils/compare"
)

func TestSHA256(t *testing.T) {
	tests := []struct {
		name  string
		input []byte
		want  []byte
	}{
		{
			name:  "iscbupt",
			input: []byte("iscbupt"),
			want: []byte{
				0x14, 0x62, 0x7C, 0xE7,
				0xEE, 0x78, 0x79, 0xA9,
				0x74, 0xC1, 0x50, 0xBF,
				0xBB, 0x10, 0xFA, 0x09,
				0x1E, 0xF4, 0x90, 0x55,
				0x67, 0xE5, 0xA1, 0x61,
				0x9F, 0x82, 0x07, 0x24,
				0xE2, 0xE1, 0x35, 0x0C,
			},
		},
		{
			name:  "Beijing University of Posts and Telecommunications",
			input: []byte("Beijing University of Posts and Telecommunications"),
			want: []byte{
				0x63, 0xE3, 0xD0, 0x4F,
				0xF4, 0xB4, 0x29, 0x02,
				0x6F, 0x4F, 0xB3, 0x05,
				0x83, 0xF6, 0x74, 0x73,
				0xCB, 0x99, 0x59, 0xD1,
				0xA1, 0x47, 0x4C, 0x9A,
				0x76, 0x65, 0x38, 0x86,
				0x7B, 0x1E, 0x95, 0x46,
			},
		},
		{
			name:  "test 440bit",
			input: []byte("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
			want: []byte{
				0x9F, 0x43, 0x90, 0xF8,
				0xD3, 0x0C, 0x2D, 0xD9,
				0x2E, 0xC9, 0xF0, 0x95,
				0xB6, 0x5E, 0x2B, 0x9A,
				0xE9, 0xB0, 0xA9, 0x25,
				0xA5, 0x25, 0x8E, 0x24,
				0x1C, 0x9F, 0x1E, 0x91,
				0x0F, 0x73, 0x43, 0x18,
			},
		},
		{
			name:  "test 448bit",
			input: []byte("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
			want: []byte{
				0xB3, 0x54, 0x39, 0xA4,
				0xAC, 0x6F, 0x09, 0x48,
				0xB6, 0xD6, 0xF9, 0xE3,
				0xC6, 0xAF, 0x0F, 0x5F,
				0x59, 0x0C, 0xE2, 0x0F,
				0x1B, 0xDE, 0x70, 0x90,
				0xEF, 0x79, 0x70, 0x68,
				0x6E, 0xC6, 0x73, 0x8A,
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := SHA256(tt.input); !cmp.Equal(got, tt.want) {
				t.Errorf("Want %+v got %+v\n", tt.want, got)
			}
		})
	}

	for i := 0; i < 10; i++ {
		length := rand.Intn(10000)
		b := make([]byte, length)
		for j := 0; j < length; j++ {
			b[j] = uint8(rand.Uint32() % 0xff)
		}

		t.Run(fmt.Sprintf("Random test %d", i), func(t *testing.T) {
			hash := sha256.New()
			hash.Write(b)
			want := hash.Sum([]byte{})
			got := SHA256(b)
			if !cmp.Equal(got, want) {
				t.Errorf("want %+v, got %+v", want, got)
			}
		})
	}
}
