package sha

import (
	"crypto/sha512"
	"fmt"
	"math/rand"
	"testing"

	cmp "github.com/OhYee/goutils/compare"
)

func TestSHA384(t *testing.T) {
	tests := []struct {
		name  string
		input []byte
		want  []byte
	}{
		{
			name:  "iscbupt",
			input: []byte("iscbupt"),
			want: []byte{
				0x2B, 0x99, 0x1D, 0xFB,
				0x7A, 0xE3, 0x3B, 0xE0,
				0xFB, 0xDD, 0xEA, 0x91,
				0x5C, 0xB2, 0x20, 0xFA,
				0xB4, 0x09, 0xAC, 0x5F,
				0x80, 0x71, 0x5D, 0x43,
				0x66, 0x23, 0xE7, 0x6B,
				0xB4, 0x1F, 0xA6, 0x21,
				0x43, 0xB6, 0x00, 0xC8,
				0x37, 0x8E, 0xE7, 0xD1,
				0x1B, 0x73, 0x3A, 0x56,
				0x61, 0x3F, 0x2E, 0xEA,
			},
		},
		{
			name:  "Beijing University of Posts and Telecommunications",
			input: []byte("Beijing University of Posts and Telecommunications"),
			want: []byte{
				0x5A, 0xA7, 0xD5, 0x05,
				0xCC, 0x58, 0x95, 0x9A,
				0x16, 0x4C, 0x9D, 0x63,
				0x04, 0x7C, 0x61, 0xB7,
				0x4E, 0xCE, 0xAA, 0x67,
				0x91, 0x99, 0x3E, 0x22,
				0xFE, 0x45, 0x8B, 0x35,
				0x05, 0x33, 0xD7, 0x1F,
				0xBE, 0x78, 0x40, 0x21,
				0x50, 0xC4, 0x1A, 0xB2,
				0x33, 0x92, 0x33, 0x94,
				0xB3, 0x19, 0xCC, 0x56,
			},
		},
		{
			name:  "test 440bit",
			input: []byte("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
			want: []byte{
				0x5D, 0x91, 0xAC, 0x7E,
				0x74, 0xE6, 0x2B, 0x5C,
				0x72, 0x89, 0x04, 0xB4,
				0x0F, 0x10, 0x78, 0x4D,
				0x66, 0xB7, 0xAF, 0x9C,
				0xB6, 0x30, 0x21, 0x23,
				0xE4, 0x8C, 0x92, 0xF0,
				0x43, 0x2C, 0xEB, 0x8D,
				0x2A, 0x92, 0xC0, 0x2D,
				0xE7, 0x7D, 0xCB, 0x29,
				0xED, 0x75, 0xC4, 0xB4,
				0x2B, 0xDE, 0x46, 0xF4,
			},
		},
		{
			name:  "test 448bit",
			input: []byte("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
			want: []byte{
				0x8A, 0x8D, 0x96, 0x49,
				0xEA, 0x04, 0xE9, 0x93,
				0xA6, 0xCA, 0x71, 0x35,
				0xAF, 0x7E, 0x33, 0x92,
				0xCC, 0x5F, 0xCA, 0x84,
				0xF8, 0x53, 0x1C, 0xAC,
				0x7A, 0xA3, 0xFE, 0xED,
				0x4E, 0xB9, 0x8F, 0x55,
				0xDC, 0xBE, 0x0F, 0x32,
				0x84, 0xB6, 0x1C, 0x6F,
				0x35, 0xF9, 0x8B, 0x02,
				0xCC, 0x64, 0x4B, 0x4C,
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := SHA384(tt.input); !cmp.Equal(got, tt.want) {
				t.Errorf("Want %+v got %+v\n", tt.want, got)
			}
		})
	}

	for i := 0; i < 10; i++ {
		length := rand.Intn(10000)
		b := make([]byte, length)
		for j := 0; j < length; j++ {
			b[j] = uint8(rand.Uint32() % 0xff)
		}

		t.Run(fmt.Sprintf("Random test %d", i), func(t *testing.T) {
			hash := sha512.New384()
			hash.Write(b)
			want := hash.Sum([]byte{})
			got := SHA384(b)
			if !cmp.Equal(got, want) {
				t.Errorf("want %+v, got %+v", want, got)
			}
		})
	}
}
