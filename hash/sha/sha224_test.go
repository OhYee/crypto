package sha

import (
	"crypto/sha256"
	"fmt"
	"github.com/OhYee/goutils"
	"math/rand"
	"testing"
)

func TestSHA224(t *testing.T) {
	tests := []struct {
		name  string
		input []byte
		want  []byte
	}{
		{
			name:  "iscbupt",
			input: []byte("iscbupt"),
			want: []byte{
				0x3F, 0x0A, 0xAF, 0xD2,
				0x80, 0x1C, 0x8C, 0x8D,
				0xEE, 0x90, 0x5A, 0xCD,
				0x09, 0x2D, 0xEC, 0xE5,
				0xC9, 0x88, 0xA5, 0x79,
				0xE0, 0x4D, 0x0D, 0x24,
				0x5E, 0xEE, 0x16, 0xFF,
			},
		},
		{
			name:  "Beijing University of Posts and Telecommunications",
			input: []byte("Beijing University of Posts and Telecommunications"),
			want: []byte{
				0x0F, 0x3F, 0xC5, 0xAF,
				0x63, 0x55, 0xF0, 0x8C,
				0xD9, 0x1D, 0x26, 0xE5,
				0x9A, 0xDE, 0xD1, 0x9C,
				0x8D, 0x5B, 0x62, 0x41,
				0x1A, 0x69, 0xB9, 0x85,
				0xC9, 0x76, 0x4F, 0x34,
			},
		},
		{
			name:  "test 440bit",
			input: []byte("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
			want: []byte{
				0xFB, 0x0B, 0xD6, 0x26,
				0xA7, 0x0C, 0x28, 0x54,
				0x1D, 0xFA, 0x78, 0x1B,
				0xB5, 0xCC, 0x4D, 0x7D,
				0x7F, 0x56, 0x62, 0x2A,
				0x58, 0xF0, 0x1A, 0x0B,
				0x1D, 0xDD, 0x64, 0x6F,
			},
		},
		{
			name:  "test 448bit",
			input: []byte("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
			want: []byte{
				0xD4, 0x08, 0x54, 0xFC,
				0x9C, 0xAF, 0x17, 0x20,
				0x67, 0x13, 0x6F, 0x2E,
				0x29, 0xE1, 0x38, 0x0B,
				0x14, 0x62, 0x6B, 0xF6,
				0xF0, 0xDD, 0x06, 0x77,
				0x9F, 0x82, 0x0D, 0xCD,
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := SHA224(tt.input); !goutils.Equal(got, tt.want) {
				t.Errorf("Want %+v got %+v\n", tt.want, got)
			}
		})
	}

	for i := 0; i < 10; i++ {
		length := rand.Intn(10000)
		b := make([]byte, length)
		for j := 0; j < length; j++ {
			b[j] = uint8(rand.Uint32() % 0xff)
		}

		t.Run(fmt.Sprintf("Random test %d", i), func(t *testing.T) {
			hash := sha256.New224()
			hash.Write(b)
			want := hash.Sum([]byte{})
			got := SHA224(b)
			if !goutils.Equal(got, want) {
				t.Errorf("want %+v, got %+v", want, got)
			}
		})
	}
}
